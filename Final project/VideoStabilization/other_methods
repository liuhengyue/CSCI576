//Global variables
//paths
char FramePath[_MAX_PATH];
char AudioPath[_MAX_PATH];
//video dimension
int w = 480;
int h = 270;
MyImage inImage, outImage;//frame for processing
int curFrame = 0; //keep track of current frame

Mat src, src_gray;

int maxCorners = 23;
int maxTrackbar = 100;

RNG rng(12345);
const char* source_window = "Image";
const float inlier_threshold = 2.5f; // Distance threshold to identify inliers
const float nn_match_ratio = 0.8f;   // Nearest neighbor matching ratio
									 /**
									 * @function PlayVideo()
									 * @Function is the same with PCMPlay template codes, play the .rgb file as video
									 */
int PlayVideo() {
	outImage.setImagePath(FramePath);
	while (outImage.ReadFrame(curFrame)) {
		Mat frame = Mat(h, w, CV_8UC3, outImage.getImageData());
		imshow("video", frame);
		waitKey(1000. / 15);
		curFrame++;
	}
	return 0;
}

/**
* @function goodFeaturesToTrack()
* @brief Apply Shi-Tomasi corner detector
*/
void goodFeaturesToTrack_Demo(int, void*)
{

	if (maxCorners < 1) { maxCorners = 1; }

	/// Parameters for Shi-Tomasi algorithm
	vector<Point2f> corners;
	double qualityLevel = 0.01;
	double minDistance = 10;
	int blockSize = 3;
	bool useHarrisDetector = false;
	double k = 0.04;

	/// Copy the source image
	Mat copy;
	copy = src.clone();

	/// Apply corner detection
	goodFeaturesToTrack(src_gray,
		corners,
		maxCorners,
		qualityLevel,
		minDistance,
		Mat(),
		blockSize,
		useHarrisDetector,
		k);


	/// Draw corners detected
	cout << "** Number of corners detected: " << corners.size() << endl;
	int r = 4;
	for (size_t i = 0; i < corners.size(); i++)
	{
		circle(copy, corners[i], r, Scalar(rng.uniform(0, 255), rng.uniform(0, 255), rng.uniform(0, 255)), -1, 8, 0);
	}

	/// Show what you got
	namedWindow(source_window, WINDOW_AUTOSIZE);
	imshow(source_window, copy);
	waitKey(0);

	/*
	vector<KeyPoint> keypointsA, keypointsB;
	Mat descriptorsA, descriptorsB;

	std::vector<DMatch> matches;

	OrbFeatureDetector detector(400);

	FREAK extractor;

	BruteForceMatcher<Hamming> matcher;

	detector.detect(image1, keypointsA);
	detector.detect(image2, keypointsB);

	extractor.compute(image1, keypointsA, descriptorsA);
	extractor.compute(image2, keypointsB, descriptorsB);

	matcher.match(descriptorsA, descriptorsB, matches);

	int nofmatches = 30;
	nth_element(matches.begin(), matches.begin() + nofmatches, matches.end());
	matches.erase(matches.begin() + nofmatches + 1, matches.end());

	Mat imgMatch;
	drawMatches(image1, keypointsA, image2, keypointsB, matches, imgMatch);

	imshow("matches", imgMatch);
	waitKey(0);
	*/

}

int xmain(int argc, char* argv[])
{

	sscanf(argv[1], "%s", &FramePath, argv[2], "%s", &AudioPath);
	inImage.setWidth(w);
	inImage.setHeight(h);
	//argv[1] FramePath; argv[2] AudioPath
	// Display the main dialog box.
	int frame = 0;
	if (strstr(FramePath, ".rgb") == NULL)
	{
		cout << "Please enter .rgb file as input." << endl;
		getchar();
		return false;
	}
	else
	{
		inImage.setImagePath(FramePath);
		if (!inImage.ReadImage())
		{
			cout << "error reading the input image sequence." << endl;
			getchar();
			return false;
		}
		else {
			outImage = inImage;
			//PlayVideo();
			src = Mat(h, w, CV_8UC3, outImage.getImageData());
			cvtColor(src, src_gray, COLOR_BGR2GRAY);

			/// Create Window
			namedWindow(source_window, WINDOW_AUTOSIZE);

			/// Create Trackbar to set the number of corners
			createTrackbar("Max  corners:", source_window, &maxCorners, maxTrackbar, goodFeaturesToTrack_Demo);

			imshow(source_window, src);

			goodFeaturesToTrack_Demo(0, 0);
			waitKey(0);
		}
		//Ptr<videostab::MotionEstimatorBase> estimator;
		//videostab::KeypointBasedMotionEstimator(estimator);

		return true;
	}

}

/*
int main(int argc, char* argv[])
{
	inImage.setWidth(w);
	inImage.setHeight(h);
	inImage.setImagePath(argv[1]);
	outImage.setWidth(w);
	outImage.setHeight(h);
	outImage.setImagePath(argv[1]);
	inImage.ReadFrame(0);
	outImage.ReadFrame(100);
	Mat img1 = Mat(h, w, CV_8UC3, inImage.getImageData());
	Mat img2 = Mat(h, w, CV_8UC3, outImage.getImageData());
	Mat img_object, img_scene;
	cvtColor(img1, img_object, COLOR_BGR2GRAY);
	cvtColor(img2, img_scene, COLOR_BGR2GRAY);
	if (!img_object.data || !img_scene.data)
	{
		std::cout << " --(!) Error reading images " << std::endl; return -1;
	}

	//-- Step 1: Detect the keypoints using SURF Detector
	int minHessian = 400;

	Ptr<SURF> detector = SURF::create(minHessian);

	std::vector<KeyPoint> keypoints_object, keypoints_scene;

	detector.detect(img_object, keypoints_object);
	detector.detect(img_scene, keypoints_scene);

	//-- Step 2: Calculate descriptors (feature vectors)
	SurfDescriptorExtractor extractor;

	Mat descriptors_object, descriptors_scene;

	extractor.compute(img_object, keypoints_object, descriptors_object);
	extractor.compute(img_scene, keypoints_scene, descriptors_scene);

	//-- Step 3: Matching descriptor vectors using FLANN matcher
	FlannBasedMatcher matcher;
	std::vector< DMatch > matches;
	matcher.match(descriptors_object, descriptors_scene, matches);

	double max_dist = 0; double min_dist = 100;

	//-- Quick calculation of max and min distances between keypoints
	for (int i = 0; i < descriptors_object.rows; i++)
	{
		double dist = matches[i].distance;
		if (dist < min_dist) min_dist = dist;
		if (dist > max_dist) max_dist = dist;
	}

	printf("-- Max dist : %f \n", max_dist);
	printf("-- Min dist : %f \n", min_dist);

	//-- Draw only "good" matches (i.e. whose distance is less than 3*min_dist )
	std::vector< DMatch > good_matches;

	for (int i = 0; i < descriptors_object.rows; i++)
	{
		if (matches[i].distance < 3 * min_dist)
		{
			good_matches.push_back(matches[i]);
		}
	}

	Mat img_matches;
	drawMatches(img_object, keypoints_object, img_scene, keypoints_scene,
		good_matches, img_matches, Scalar::all(-1), Scalar::all(-1),
		vector<char>(), DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS);


	//-- Localize the object from img_1 in img_2
	std::vector<Point2f> obj;
	std::vector<Point2f> scene;

	for (size_t i = 0; i < good_matches.size(); i++)
	{
		//-- Get the keypoints from the good matches
		obj.push_back(keypoints_object[good_matches[i].queryIdx].pt);
		scene.push_back(keypoints_scene[good_matches[i].trainIdx].pt);
	}

	Mat H = findHomography(obj, scene, CV_RANSAC);

	//-- Get the corners from the image_1 ( the object to be "detected" )
	std::vector<Point2f> obj_corners(4);
	obj_corners[0] = Point(0, 0); obj_corners[1] = Point(img_object.cols, 0);
	obj_corners[2] = Point(img_object.cols, img_object.rows); obj_corners[3] = Point(0, img_object.rows);
	std::vector<Point2f> scene_corners(4);

	perspectiveTransform(obj_corners, scene_corners, H);


	//-- Draw lines between the corners (the mapped object in the scene - image_2 )
	Point2f offset((float)img_object.cols, 0);
	line(img_matches, scene_corners[0] + offset, scene_corners[1] + offset, Scalar(0, 255, 0), 4);
	line(img_matches, scene_corners[1] + offset, scene_corners[2] + offset, Scalar(0, 255, 0), 4);
	line(img_matches, scene_corners[2] + offset, scene_corners[3] + offset, Scalar(0, 255, 0), 4);
	line(img_matches, scene_corners[3] + offset, scene_corners[0] + offset, Scalar(0, 255, 0), 4);

	//-- Show detected matches
	imshow("Good Matches & Object detection", img_matches);

	waitKey(0);

	return 0;
}
*/
